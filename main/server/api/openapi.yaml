---
openapi: 3.0.0
info:
  title: Jeonha-redux
  description: Untact DriveThru를 위한 API 명세서
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/kiJiyeon/Jeonha-redux/1.0.0
  description: SwaggerHub API Auto Mocking
- url: https://server1sttrial.azurewebsites.net
  description: SwaggerHub API Auto Mocking
paths:
  /signUP:
    post:
      summary: Post Member's Data API
      parameters:
      - name: UserWebId
        in: query
        description: users membership ID
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: UserName
        in: query
        description: user name
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: PW
        in: query
        description: user's password
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: PhoneNum
        in: query
        description: user's phone number
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: carId
        in: query
        description: user's car ID
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successfully posted Member's Data !
          content:
            application/json:
              schema:
                type: object
        "400":
          description: failed to post Member's Data ! it must be overlaped ID or PW / or you typed too long ID or PW
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
  /signIn:
    post:
      summary: post ID & Password from DB to compare DB's and Web's
      parameters:
      - name: UserWebId
        in: query
        description: user's id that inputed when sign up
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: PW
        in: query
        description: user's password that inputed when sign up
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successfully posted ID & Password !
          content:
            application/json:
              schema:
                type: object
        "400":
          description: failed to post Member's Data ! it must be Id Error or PW Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_1'
  /getMenuData:
    get:
      summary: Get Menu API
      responses:
        "200":
          description: successfully got Menu Data !
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        "400":
          description: failed to get Menu Data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_2'
  /insertIntoBasket:
    post:
      summary: put something to Basket before the order
      parameters:
      - name: OrderToMenu_MenuNo
        in: query
        description: menu number
        required: true
        style: form
        explode: true
        schema:
          type: integer
      - name: OrderWebId
        in: query
        description: user Web ID
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: WEBCarId
        in: query
        description: Car id that user inputed when order
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: OrderPayment
        in: query
        description: payment
        required: true
        style: form
        explode: true
        schema:
          type: integer
      - name: MenuNo
        in: query
        description: id number of menu
        required: true
        style: form
        explode: true
        schema:
          type: integer
      - name: MenuCount
        in: query
        description: quantity of menus users ordered
        required: true
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: successfully inserted(posted) menus into basket !
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
  /getBasket:
    get:
      parameters:
        - name: UserWebId
          in: query
          description: users membership ID
          required: true
          style: form
          explode: true
          schema:
            type: string
      responses:
        "200":
          description: successfully got basket list !
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_2'
        "400":
          description: failed to get Menu Data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_2'
  /updateFromBasket:
    post:
      summary: to add things to Basket
      parameters:
      - name: UserWebId
        in: query
        description: user's id that inputed when sign up
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: MenuNo
        in: query
        description: id number of menu
        required: true
        style: form
        explode: true
        schema:
          type: integer
      - name: MenuCount
        in: query
        description: quantity of menus users ordered
        required: true
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: successfully posted ID & Password !
          content:
            application/json:
              schema:
                type: object
        "400":
          description: failed to post Member's Data ! it must be Id Error or PW Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_1'
  /deleteFromBasket:
    post:
      summary: update orderstate to mark `deleted` from basket
      parameters:
      - name: UserWebId
        in: query
        description: user's id that inputed when sign up
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: MenuNo
        in: query
        description: id number of menu
        required: true
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: successfully deleted from basket !
          content:
            application/json:
              schema:
                type: object
  /order:
    get:
      summary: to check the order-list
      responses:
        "200":
          description: successfully got the order-list & user's info!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_3'
  /getOrder:
    get:
      summary: to show Ordered list
      responses:
        "200":
          description: successfully got the Order list!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_4'
  /CancelOrder:
    post:
      summary: update orderstate to mark `deleted` from OrderList
      parameters:
      - name: UserWebId
        in: query
        description: user's id that inputed when sign up
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successfully deleted from ordertomenu!
          content:
            application/json:
              schema:
                type: object
  /paying:
    post:
      summary: clicked `paying`
      parameters:
      - name: OrderState
        in: query
        description: to note which state is it now
        required: true
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: successfully posted OrderState !
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_5'
components:
  schemas:
    inline_response_400:
      type: object
      properties:
        IdOverlap:
          type: boolean
        PwOverlap:
          type: boolean
        DbError:
          type: boolean
    inline_response_400_1:
      type: object
      properties:
        IdError:
          type: boolean
        PwError:
          type: boolean
    inline_response_200:
      type: object
      properties:
        MenuNo:
          type: integer
        FoodNameKor:
          type: string
        FoodNameEng:
          type: string
        Price:
          type: integer
    inline_response_400_2:
      type: object
      properties:
        GetError:
          type: string
    inline_response_200_1:
      type: object
      properties:
        OrderToMenu_OrderNo:
          type: integer
        OrderToMenu_MenuNo:
          type: string
        OrderWebId:
          type: string
        WEBCarId:
          type: integer
        OrderState:
          type: integer
        OrderPayment:
          type: integer
        MenuNo:
          type: integer
        MenuCount:
          type: integer
        Price:
          type: integer
    inline_response_200_2:
      type: object
      properties:
        BasketId:
          type: integer
        BasketMenuNo:
          type: string
        BasketMenuCount:
          type: string
        BasketState:
          type: integer
    inline_response_200_3:
      type: object
      properties:
        UserName:
          type: string
        PhoneNum:
          type: string
        carId:
          type: string
        OrderToMenu_MenuNo:
          type: integer
        MenuCount:
          type: integer
        OrderPayment:
          type: integer
    inline_response_200_4:
      type: object
      properties:
        OrderToMenu_OrderNo:
          type: integer
        OrderToMenu_MenuNo:
          type: integer
        Menucount:
          type: integer
    inline_response_200_5:
      type: object
      properties:
        OrderState:
          type: integer
