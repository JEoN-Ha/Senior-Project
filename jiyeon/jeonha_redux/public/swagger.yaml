openapi: 3.0.0
info: 
  version: '1.0.0'
  title: Untact DriveThru API
  description: this is for Senior Project of Jeonha
servers:
  - description: Jeonha API
    url: http://localhost:4000/
paths:
  /signUP:
    post:
      summary: Post Member's Data API
      parameters: 
        - in: query
          name: UserWebId
          description: users membership ID
          required: true
          schema:
              type: string
        - in: query
          name: UserName
          description: user name
          required: true
          schema:
              type: string
        - in: query
          name: PW
          description: user's password
          required: true
          schema:
              type: string
          - in: query
            name: PhoneNum
            description: user's phone number
            required: true
            schema:
                type: string
          - in: query
            name: carId
            description: user's car ID
            required: true
            schema: 
              type: string
      responses: 
        '200':
          description: successfully posted Member's Data !
          content: 
            application/json:
              schema: 
                type: object
                properties:
                  UserWebId:
                    type: string
                  UserName:
                    type: string
                  PW:
                    type: string
                  PhoneNum:
                    type: string
                  carId:
                    type: string
  /signIn:
    post:
      summary: post ID & Password from DB to compare DB's and Web's
      parameters:
        - in: query
          name: UserWebId
          description: user's id that inputed when sign up
          required: true
          schema:
            type: string
        - in: query
          name: PW
          description: user's password that inputed when sign up
          required: true
          schema:
            type: string
      responses: 
        '200':
          description: successfully posted ID & Password !
          content: 
            application/json:
              schema: 
                type: object
                properties:
                  UserWebId:
                    type: string
                  PW:
                    type: string
  /getMenuData:
    get: 
      summary: Get Menu APIs
      parameters:
        - in: query
          name: MenuNo
          description: id number for the menu
          required: true
          schema:
            type: integer
        - in: query
          name: FoodNameKor
          description: menu name in Korean
          required: true
          schema:
            type: string
        - in: query
          name: FoodNameEng
          description: menu name in English
          required: true
          schema:
            type: string
        - in: query
          name: Price
          description: Menu Price
          required: true
          schema:
            type: integer 
      responses: 
        '200':
          description: successfully got Menu Data !
          content: 
            application/json:
              schema: 
                type: object
                properties:
                  MenuNo:
                    type: integer
                  FoodNameKor:
                    type: string
                  FoodNameEng:
                    type: string
                  Price:
                    type: integer    
  /insertIntoBasket:
    post:
      summary: put something to Basket before the order
      parameters:
        - in: query
          name: OrderToMenu_OrderNo
          description: order number
          required: true
          schema:
            type: integer
        - in: query
          name: OrderToMenu_MenuNo
          description: menu number
          required: true
          schema:
            type: integer
        - in: query
          name: OrderWebId
          description: user Web ID
          required: true
          schema: 
            type: string
        - in: query
          name: WEBCarId
          description: Car id that user inputed when order
          required: true
          schema: 
            type: string
        - in: query
          name: OrderState
          description: to note which state is it now
          required: true
          schema:
            type: integer
        - in: query
          name: OrderPayment
          description: payment 
          required: true
          schema: 
            type: integer
      responses: 
        '200':
          description: successfully inserted(posted) menus into basket !
          content: 
            application/json:
              schema: 
                type: object
                properties:
                  OrderToMenu_OrderNo:
                    type: integer
                  OrderToMenu_MenuNo:
                    type: string
                  OrderWebId:
                    type: string
                  WEBCarId:
                    type: integer
                  OrderState:
                    type: integer
                  OrderPayment:
                    type: integer 
  /order:
    get: 
      summary: if user clicked `order`        
      parameters:
        - in: query
          name: OrderToMenu_MenuNo
          description: menu number
          required: true
          schema:
            type: integer
        - in: query
          name: MenuCount
          description: how many users ordered per menus    
          required: true
          schema: 
            type: integer
         - in: query
          name: OrderPayment
          description: payment 
          required: true
          schema: 
            type: integer 
      responses: 
        '200':
          description: successfully got the order-list !
          content: 
            application/json:
              schema: 
                type: object
                properties:
                  OrderToMenu_OrderNo:
                    type: integer
                  MenuCount:
                    type: integer
                  OrderPayment:
                    type: integer
  /beforePaying  #결제 전 확인
    get: 
      summary: to check the order-list
      parameters: 
       - in: query
          name: UserName
          description: user name
          required: true
          schema:
              type: string 
        - in: query
            name: PhoneNum
            description: user's phone number
            required: true
            schema:
                type: string
        - in: query
            name: carId
            description: user's car ID
            required: true
            schema: 
              type: string
        - in: query
          name: OrderToMenu_MenuNo
          description: menu number
          required: true
          schema:
            type: integer
        - in: query
          name: MenuCount
          description: how many users ordered per menus    
          required: true
          schema: 
            type: integer
        - in: query
          name: OrderPayment
          description: payment 
          required: true
          schema: 
            type: integer
      responses: 
        '200':
          description:successfully got the order-list & user's info!
          content: 
            application/json:
              schema: 
                type: object
                properties:
                  UserName:
                    type: string
                  PhoneNum:
                    type: string
                  carId:
                    type: string
                  OrderToMenu_MenuNo:
                    type: integer
                  MenuCount:
                    type: integer
                  OrderPayment:
                    type: integer
  /paying:
    post: 
      summary: clicked `paying`
      parameters:
        - in: query
          name: OrderState
          description: to note which state is it now
          required: true
          schema:
            type: integer
      responses: 
        '200':
          description: successfully posted OrderState !
          content: 
            application/json:
              schema: 
                type: object
                properties:
                  OrderState:
                    type: integer

              


