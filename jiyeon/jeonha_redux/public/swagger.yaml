openapi: 3.0.0
info:
  version: 1.0.0
  title: Jeonha-redux
  description: Untact DriveThru를 위한 API 명세서
servers:
  # Added by API Auto Mocking Plugin
  - description: JeonHa Untact DriveThru API
    url: https://localhost:5000
  /signUP:
    post:
      summary: Post Member's Data API
      parameters: 
        - in: query
          name: UserWebId
          description: users membership ID
          required: true
          schema:
              type: string
        - in: query
          name: UserName
          description: user name
          required: true
          schema:
              type: string
        - in: query
          name: PW
          description: user's password
          required: true
          schema:
            type: string
        - in: query
          name: PhoneNum
          description: user's phone number
          required: true
          schema:
              type: string
        - in: query
          name: carId
          description: user's car ID
          required: true
          schema: 
            type: string
      responses: 
        '200':
          description: successfully posted Member's Data !
          content: 
            application/json:
              schema: 
                type: object
                properties:
                  SignupSuccess:
                    type: boolean
        '400':
            description: failed to post Member's Data ! it must be overlaped ID or PW / or you typed too long ID or PW
            content: 
              application/json:
                schema: 
                  type: object
                  properties:
                    IdOverlap:
                      type: boolean
                    PwOverlap:
                      type: boolean
                    DbError:
                      type: boolean
  /signIn:
    post:
      summary: post ID & Password from DB to compare DB's and Web's
      parameters:
        - in: query
          name: UserWebId
          description: user's id that inputed when sign up
          required: true
          schema:
            type: string
        - in: query
          name: PW
          description: user's password that inputed when sign up
          required: true
          schema:
            type: string
      responses: 
        '200':
          description: successfully posted ID & Password !
          content: 
            application/json:
              schema: 
                type: object
                properties:
                  LoginSuccess:
                    type: boolean
        '400':
          description: failed to post Member's Data ! it must be Id Error or PW Error
          content: 
            application/json:
              schema: 
                type: object
                properties:
                  IdError:
                    type: boolean
                  PwError:
                    type: boolean
  /getMenuData:
    get: 
      summary: Get Menu API
      responses: 
        '200':
          description: successfully got Menu Data !
          content: 
            application/json:
              schema: 
                type: object
                properties:
                  MenuNo:
                    type: integer
                  FoodNameKor:
                    type: string
                  FoodNameEng:
                    type: string
                  Price:
                    type: integer    
  /insertIntoBasketByCar:
    post:
      summary: put something to Basket before the order
      parameters:
        - in: query
          name: OrderToMenu_MenuNo
          description: menu number
          required: true
          schema:
            type: integer
        - in: query
          name: OrderWebId
          description: user Web ID
          required: true
          schema: 
            type: string
        - in: query
          name: WEBCarId
          description: Car id that user inputed when order
          required: true
          schema: 
            type: string
        - in: query
          name: OrderPayment
          description: payment 
          required: true
          schema: 
            type: integer
        - in: query
          name: MenuNo
          description: id number of menu
          required: true
          schema: 
            type: integer  
        - in: query
          name: MenuCount
          description: quantity of menus users ordered 
          required: true
          schema: 
            type: integer
        - in: query
          name: Price
          description: menu price
          required: true
          schema:
            type: integer
      responses: 
        '200':
          description: successfully inserted(posted) menus into basket !
          content: 
            application/json:
              schema: 
                type: object
                properties:
                  OrderToMenu_OrderNo:
                    type: integer
                  OrderToMenu_MenuNo:
                    type: string
                  OrderWebId:
                    type: string
                  WEBCarId:
                    type: integer
                  OrderState:
                    type: integer
                  OrderPayment:
                    type: integer 
                  MenuNo:
                    type: integer
                  MenuCount:
                    type: integer
                  Price:
                    type: integer
  /insertIntoBasketOnFoot:
      post:
        summary: put something to Basket before the order
        parameters:
          - in: query
            name: OrderToMenu_MenuNo
            description: menu number
            required: true
            schema:
              type: integer
          - in: query
            name: OrderWebId
            description: user Web ID
            required: true
            schema: 
              type: string
          - in: query
            name: OrderPayment
            description: payment 
            required: true
            schema: 
              type: integer
          - in: query
            name: MenuNo
            description: id number of menu
            required: true
            schema: 
              type: integer  
          - in: query
            name: MenuCount
            description: quantity of menus users ordered 
            required: true
            schema: 
              type: integer
          - in: query
            name: Price
            description: menu price
            required: true
            schema:
              type: integer
        responses: 
          '200':
            description: successfully inserted(posted) menus into basket !
            content: 
              application/json:
                schema: 
                  type: object
                  properties:
                    OrderToMenu_OrderNo:
                      type: integer
                    OrderToMenu_MenuNo:
                      type: string
                    OrderWebId:
                      type: string
                    OrderState:
                      type: integer
                    OrderPayment:
                      type: integer 
                    MenuNo:
                      type: integer
                    MenuCount:
                      type: integer
                    Price:
                      type: integer
  /order:  #결제 전 확인
    get: 
      summary: to check the order-list
      responses: 
        '200':
          description: successfully got the order-list & user's info!
          content: 
            application/json:
              schema: 
                type: object
                properties:
                  UserName:
                    type: string
                  PhoneNum:
                    type: string
                  carId:
                    type: string
                  OrderToMenu_MenuNo:
                    type: integer
                  MenuCount:
                    type: integer
                  OrderPayment:
                    type: integer
  /paying:
    post: 
      summary: clicked `paying`
      parameters:
        - in: query
          name: OrderState
          description: to note which state is it now
          required: true
          schema:
            type: integer
      responses: 
        '200':
          description: successfully posted OrderState !
          content: 
            application/json:
              schema: 
                type: object
                properties:
                  OrderState:
                    type: integer
  /CancelOrderFromBasket:
    post: 
      summary: update orderstate to mark `deleted` from basket
      parameters:
        - in: query
          name: UserWebId
          description: user's id that inputed when sign up
          required: true
          schema:
            type: string
        - in: query
          name: MenuNo
          description: id number of menu
          required: true
          schema: 
            type: integer  
      responses: 
        '200':
          description: successfully deleted from basket !
          content: 
            application/json:
              schema: 
                type: object
                properties:
                  deleteSuccess:
                    type: boolean
  /CancelOrder:
    post: 
      summary: update orderstate to mark `deleted` from OrderList
      parameters: 
        - in: query
          name: UserWebId
          description: user's id that inputed when sign up
          required: true
          schema:
            type: string
      responses: 
        '200':
          description: successfully deleted from ordertomenu!
          content: 
            application/json:
              schema: 
                type: object
                properties:
                  deleteSuccess:
                    type: boolean